swagger: '2.0'

info:
  version: '1.0'
  title: "knodels"
  description: API for managing a homework system.

#Basic security through authentication
#securityDefinitions:
#  Authentication:
#    type: basic
#security:
#  - Authentication: []

host: api.dinnertable.it

basePath: /v1

schemes:
- https

consumes:
- application/json
produces:
- application/json
    
definitions:

  User:
    allOf:
    - type: object
      properties:
        UserId:
          type: integer
          format: int32
          description: The number that identifies a single user
          example: 75
      required:
      - UserId
    - $ref: "#/definitions/UserData"
  
  UserData:
    title: UserData
    description: The entity containing all user data.
    type: object
    properties:
      Name:
        type: string
        description: The full name of the user
        example: Mario
      Surname:
        type: string
        description: The full surname of the user
        example: Rossi
      Email:
        type: string
        description: The user's email
        example: mario.rossi@knodel.it
    required:
    - Name
    - Surname
    - Email
  
  Task:
    allOf:
    - type: object
      properties:
        TaskId:
          type: integer
          format: int64
          description: The number that identifies a single task
          example: 235
      required:
      - TaskId
    - $ref: "#/definitions/TaskData"
    
      
  TaskData:
    title: TaskData
    description: Object storing tasks data
    type: object
    properties:
      AbsoluteDateDeadline:
        type: integer
        format: int64
        description: The date in which the task must be completed, using Unix time.
        example: 1541867607
      RelativeDeadline:
        type: integer
        minimum: 0
        format: int32
        description: The number of second in which the task must be completed upon assignment
        example: 108000
      TaskType:
        type: string
        description: The type of the task
        example: "multichoice"
        #TODO: define task types
      TaskFile:
        type: string
        #apiary doesn't support binary format
        #format: binary
        description: The file attached to the task
    required:
      - AbsoluteDateDeadline
      - RelativeDeadline
      - TaskType
      - TaskFile
  
  WorkGroup:
    title: WorkGroup
    description: A set of users that are tasked to complete together an exam assigned to them
    type: array
    items:
      type: integer
      description: the id of a user
    
  Exam:
    allOf:
    - type: object
      properties:
        ExamId:
          type: integer
          format: int64
          description: The number that identifies a single exam
          example: 245
      required:
      - ExamId
    - $ref: "#/definitions/ExamData"
          
  ExamData:
    title: ExamData
    description: All the informations about an exam
    type: object
    properties:
      Name:
        type: string
        description: A user friendly name fot the exam
        example: formal languages and compilers
      Description:
        type: string
        description: A short description of the exam
        example: The exam consists of 13 question, the first 5 are about formal languages, the 7 laters are open questions about compilers and their algorithms. The last one is the bonus question.
      Deadline:
        type: integer
        format: int64
        description: The date in which the exam must be completed, using Unix time.
        example: 1550676600
      WorkGroups:
        type: array
        description: The groups the exam is assigned for
        items:
          $ref: "#/definitions/WorkGroup"
      Tasks:
        type: array
        description: The list of tasks to complete for the exam
        items:
          type: integer
          description: the id of a task
    required:
      - Name
      - Description
      - Deadline
      - WorkGroups
      - Tasks


paths:
  
  /users/:
    get:
    
      parameters:
        - in: query
          name: offset
          type: integer
          minimum: 0
          description: The number of users to skip
        - in: query
          name: limit
          type: integer
          minimum: 0
          description: The number of users to display
 
      summary: Retrieve the complete list of the users
      tags: [Users]
      
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        
        404:
          description: No user has been found
    post:
      summary: Create a new user
      tags: [Users]
      parameters:
      - in: body
        name: user
        required: true
        schema:
           $ref: "#/definitions/UserData"
      responses:
        201:
          description: The user has been successfully created
        401:
          description: The request contains invalid data
  /users/{UserId}:
    parameters:
      - in: path
        name: UserId
        required: true
        type: integer
    get:
      summary: Retrieve the informations of the user identified by the specific id
      tags: [Users]
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/User"
        404:
          description: The user with the specific UserId hasn't been found
    delete:
      summary: Delete a user from the system
      tags: [Users]
      responses:
        204:
          description: User successfully deleted
        404:
          description: The user with the specific UserId hasn't been found
  
  /tasks/:
    get:
      summary: Retrieve all the tasks in the system
      
      parameters:
        - in: query
          name: offset
          type: integer
          minimum: 0
          description: The number of tasks to skip
        - in: query
          name: limit
          type: integer
          minimum: 0
          description: The number of tasks to display
          
      tags: [Tasks]
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: "#/definitions/Task"
        404:
          description: No task has been found
    post:
      summary: Create a new task
      tags: [Tasks]
      parameters:
      - in: body
        name: task
        schema:
          $ref: "#/definitions/TaskData"
      responses:
        201:
          description: The task has been successfully created
        400:
          description: The request contains invalid data
  
  /tasks/{TaskId}/:
    parameters:
      - in: path
        name: TaskId
        required: true
        type: integer
    get:
      summary: Retrieve the information about the task with the specific TaskId
      tags: [Tasks]
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/Task"
        404:
          description: The task with the specific TaskId hasn't been found
    delete:
      summary: Remove the task identified with TaskId from the system
      tags: [Tasks]
      responses:
        204:
          description: The task has been successfully deleted
        404:
          description: The task with the specific TaskId hasn't been found

  /Exams/:
    get:
      summary: Retrieve all the exams
      
      parameters:
        - in: query
          name: offset
          type: integer
          minimum: 0
          description: The number of exams to skip
        - in: query
          name: limit
          type: integer
          minimum: 0
          description: The number of exams to display
          
      tags: [Exams]
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: "#/definitions/Exam"
        404:
          description: No exam has been fund
    post:
      summary: Create a new exam
      tags: [Exams]
      parameters:
      - in: body
        name: exam
        schema: 
          $ref: "#/definitions/ExamData"
      responses:
        201:
          description: The exam has been successfully created
        400:
          description: The request contains invalid data
          
  /Exams/{ExamId}/:
    parameters:
      - in: path
        name: ExamId
        required: true
        type: integer
    get:
      summary: Retrieve the information about an exam
      tags: [Exams]
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/Exam"
        404:
          description: The exam with the specific ExamId hasn't been found
    delete:
      summary: Delete an exam
      tags: [Exams]
      responses:
        204:
          description: The exam has been successfully deleted
        404:
          description: The exam with the specific ExamId hasn't been found